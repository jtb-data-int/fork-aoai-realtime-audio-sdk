import { useState, useEffect, useRef } from 'react'
import { Player } from './utils/Player'
import { Recorder } from './utils/Recorder'
import { processQueryForStaticData } from './utils/StaticDataProvider'
import { transcribeAudio, getChatResponse, textToSpeech } from './utils/ApiService'
import { AudioBufferManager } from './utils/AudioBufferManager'
import './App.css'

// Voice options
type Voice = 'alloy' | 'echo' | 'fable' | 'onyx' | 'nova' | 'shimmer' | 'ash' | 'ballad' | 'coral' | 'sage' | 'verse';

enum InputState {
  Working,
  ReadyToStart,
  ReadyToStop,
}

// デフォルトのSystem Message
const DEFAULT_SYSTEM_MESSAGE = `あなたは経験豊富な旅行プランナーです。質問者の趣味や志向に応じて最適なプランを提示することができます。
なお、会話に当たっては以下を守るようにしてください。
・話し終わったら、質問者が応答するまで勝手に話さないでください。会話のキャッチボールを意識してください
・わからないことについては、はっきり「わかりません」と伝えるようにしてください`;

function App() {
  // 状態管理
  const [inputState, setInputState] = useState<InputState>(InputState.ReadyToStart)
  const [endpoint, setEndpoint] = useState<string>(import.meta.env.VITE_AZURE_OPENAI_ENDPOINT || '')
  const [apiKey, setApiKey] = useState<string>(import.meta.env.VITE_AZURE_OPENAI_API_KEY || import.meta.env.VITE_OPENAI_API_KEY || '')
  const [isAzureOpenAI, setIsAzureOpenAI] = useState<boolean>(!!import.meta.env.VITE_AZURE_OPENAI_ENDPOINT)
  const [systemMessage, setSystemMessage] = useState<string>(DEFAULT_SYSTEM_MESSAGE)
  const [temperature, setTemperature] = useState<string>('')
  const [voice, setVoice] = useState<string>('alloy')
  const [receivedText, setReceivedText] = useState<string[]>([])

  // Refs
  const audioRecorderRef = useRef<Recorder | null>(null)
  const audioPlayerRef = useRef<Player | null>(null)
  const recordingActiveRef = useRef<boolean>(false)
  const audioBufferManagerRef = useRef<AudioBufferManager>(new AudioBufferManager())

  // 音声関連のユーティリティ関数
  const processAudioRecordingBuffer = (data: Buffer) => {
    const uint8Array = new Uint8Array(data);
    audioBufferManagerRef.current.appendData(uint8Array);
  }

  const resetAudio = async (startRecording: boolean) => {
    recordingActiveRef.current = false;
    if (audioRecorderRef.current) {
      audioRecorderRef.current.stop();
    }
    if (audioPlayerRef.current) {
      audioPlayerRef.current.clear();
    }
    
    audioRecorderRef.current = new Recorder(processAudioRecordingBuffer);
    audioPlayerRef.current = new Player();
    await audioPlayerRef.current.init(24000);

    if (startRecording) {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        audioRecorderRef.current.start(stream);
        audioBufferManagerRef.current.startRecording();
        recordingActiveRef.current = true;
      } catch (error) {
        console.error("マイクへのアクセスに失敗しました", error);
        setInputState(InputState.ReadyToStart);
      }
    }
  }

  // 会話処理のための関数
  const handleSpeechToTextToSpeech = async () => {
    try {
      setReceivedText(prev => [...prev, "<< Session Started >>", ""]);
      setInputState(InputState.ReadyToStop);

      // 1. Start recording
      await resetAudio(true);
      setReceivedText(prev => {
        const newTexts = [...prev, "<< Speech Started >>", ""];
        return newTexts;
      });
      
    } catch (error) {
      console.error("Error starting recording", error);
      setInputState(InputState.ReadyToStart);
    }
  }
  
  // Stop recording and process the speech
  const stopRecordingAndProcess = async () => {
    setInputState(InputState.Working);
    
    try {
      // Stop recording and get audio buffer
      const audioBuffer = audioBufferManagerRef.current.stopRecording();
      setReceivedText(prev => [...prev, "<< Processing Audio >>", ""]);
      
      // 1. Convert speech to text
      const transcript = await transcribeAudio(audioBuffer);
      setReceivedText(prev => {
        const updatedTexts = [...prev];
        updatedTexts[updatedTexts.length - 2] = `User: ${transcript}`;
        return updatedTexts;
      });
      
      // 2. Check if query should get static data
      let updatedSystemPrompt = systemMessage;
      const staticData = processQueryForStaticData(transcript);
      if (staticData) {
        updatedSystemPrompt = `${systemMessage}\n\n【アシスタントへの追加情報】\n${staticData}`;
        console.log("Static flight data injected into conversation");
      }
      
      // 3. Get AI response
      setReceivedText(prev => [...prev, "Assistant: (thinking...)"]);
      const aiResponse = await getChatResponse(transcript, updatedSystemPrompt);
      
      setReceivedText(prev => {
        const updatedTexts = [...prev];
        updatedTexts[updatedTexts.length - 1] = `Assistant: ${aiResponse}`;
        return updatedTexts;
      });
      
      // 4. Convert AI response to speech
      setReceivedText(prev => [...prev, "<< Converting to speech >>"]);
      const speechBuffer = await textToSpeech(aiResponse, voice as Voice);
      
      // 5. Play the audio response
      if (audioPlayerRef.current) {
        // Convert buffer to Int16Array for the player
        const audioContext = new AudioContext();
        const audioSource = await audioContext.decodeAudioData(speechBuffer);
        const audioData = audioSource.getChannelData(0);
        
        // Convert Float32Array to Int16Array for our player
        const int16Data = new Int16Array(audioData.length);
        for (let i = 0; i < audioData.length; i++) {
          int16Data[i] = Math.max(-32768, Math.min(32767, audioData[i] * 32768));
        }
        
        audioPlayerRef.current.play(int16Data);
      }
      
      setReceivedText(prev => [...prev, "<< Speech Completed >>", "---"]);
      
    } catch (error) {
      console.error("Error processing speech", error);
      setReceivedText(prev => [...prev, `Error: ${error}`, "---"]);
    }
    
    setInputState(InputState.ReadyToStart);
  }

  // エンドポイントURLに基づいてAzure OpenAIか判定
  useEffect(() => {
    setIsAzureOpenAI(endpoint.indexOf('azure') > -1);
  }, [endpoint]);

  // Start conversation
  const startConversation = async () => {
    setInputState(InputState.Working);
    
    const trimmedEndpoint = endpoint.trim();
    const trimmedApiKey = apiKey.trim();
    
    if (!trimmedEndpoint) {
      alert("Endpoint is required");
      setInputState(InputState.ReadyToStart);
      return;
    }
    
    if (!trimmedApiKey) {
      alert("API Key is required");
      setInputState(InputState.ReadyToStart);
      return;
    }
    
    await handleSpeechToTextToSpeech();
  }

  const stopConversation = async () => {
    await stopRecordingAndProcess();
  }

  const clearAll = () => {
    setReceivedText([]);
  }

  // Resize panel functionality
  const handleResizeStart = (e: React.MouseEvent<HTMLDivElement>) => {
    e.preventDefault();
    
    const container = document.querySelector('.container') as HTMLElement;
    const resizablePanel = document.querySelector('.resizable-panel') as HTMLElement;
    const initialX = e.clientX;
    const initialWidth = resizablePanel.offsetWidth;
    
    const handleMouseMove = (moveEvent: MouseEvent) => {
      const deltaX = moveEvent.clientX - initialX;
      const newWidth = initialWidth + deltaX;
      
      // Set min and max width constraints
      const minWidth = 250;
      const maxWidth = Math.min(600, container.offsetWidth * 0.7); // 70% of container width or 600px, whichever is smaller
      
      if (newWidth >= minWidth && newWidth <= maxWidth) {
        resizablePanel.style.width = `${newWidth}px`;
      }
    };
    
    const handleMouseUp = () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
    
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  };

  return (
    <div className="app-container">
      <div className="container">
        <div className="resizable-panel" style={{ width: '320px' }}>
          <div className="resize-handle" onMouseDown={handleResizeStart}></div>
          <div className="controls">
            <h2 className="section-heading">Connection Settings</h2>
          <div className="input-group connection-settings">
            <label htmlFor="endpoint">Endpoint (from .env if available)</label>
            <input 
              id="endpoint" 
              type="text" 
              value={endpoint}
              onChange={(e) => setEndpoint(e.target.value)}
              placeholder="Enter resource/endpoint URL"
              disabled={true}
            />
          </div>
          
          <div className="toggle-group connection-settings">
            <label htmlFor="azure-toggle">Azure OpenAI</label>
            <input 
              id="azure-toggle" 
              type="checkbox" 
              checked={isAzureOpenAI}
              onChange={(e) => setIsAzureOpenAI(e.target.checked)}
              disabled={true}
            />
          </div>
          
          <div className="input-group connection-settings">
            <label htmlFor="api-key">API Key (from .env if available)</label>
            <input 
              id="api-key" 
              type="password"
              value={apiKey}
              onChange={(e) => setApiKey(e.target.value)}
              placeholder="Enter API key"
              disabled={true}
            />
          </div>
          
          <h2 className="section-heading">Model Configuration</h2>
          <div className="input-group">
            <label htmlFor="session-instructions">System Message</label>
            <textarea 
              id="session-instructions"
              value={systemMessage}
              onChange={(e) => setSystemMessage(e.target.value)}
              placeholder="デフォルトでは旅行プランナーの設定になっています。必要に応じて編集してください。"
              rows={4}
              disabled={inputState !== InputState.ReadyToStart}
            />
          </div>
          
          <div className="input-group">
            <label htmlFor="temperature">Temperature</label>
            <input 
              id="temperature" 
              type="text"
              value={temperature}
              onChange={(e) => setTemperature(e.target.value)}
              placeholder="0.6-1.2 (default 0.8)"
              disabled={inputState !== InputState.ReadyToStart}
            />
          </div>
          
          <div className="input-group">
            <label htmlFor="voice">Voice</label>
            <select 
              id="voice"
              value={voice}
              onChange={(e) => setVoice(e.target.value)}
              disabled={inputState !== InputState.ReadyToStart}
            >
              <option value="alloy">alloy</option>
              <option value="ash">ash</option>
              <option value="ballad">ballad</option>
              <option value="coral">coral</option>
              <option value="echo">echo</option>
              <option value="sage">sage</option>
              <option value="shimmer">shimmer</option>
              <option value="verse">verse</option>
            </select>
          </div>
          
          <div className="button-group">
            <button 
              onClick={startConversation}
              disabled={inputState !== InputState.ReadyToStart}
            >
              Record
            </button>
            <button 
              className="stop-button"
              onClick={stopConversation}
              disabled={inputState !== InputState.ReadyToStop}
            >
              Stop
            </button>
          </div>
          
          <div className="button-group">
            <button 
              className="clear-button"
              onClick={clearAll}
              type="button"
            >
              Clear all
            </button>
          </div>
        </div>
        </div>
        
        <div id="received-text-container">
          {receivedText.map((text, index) => (
            text === "---" ? <hr key={index} /> : <p key={index}>{text}</p>
          ))}
        </div>
      </div>
    </div>
  )
}

export default App
